================================================================================
File: IMGFORMT.TXT													  10/24/2015
Description: Embedded Image Asset File Specification
Author: mipani																1.0
================================================================================

<<< WHAT IS THE EMBEDDED IMAGE ASSET? >>>

Embedded Image Asset (.eia) is a file format used for image assets in embedded
systems. It is designed to be a format that, with little or no client-side
processing, can be directly loaded into your embedded system's video hardware.
They are optimal as a standard image format for classic video game consoles.

Embedded Image Assets are greatly flexible and support any type of video
display hardware's format.

<<< FILE FORMAT >>>

As an overview, the file consists of a header and the image data. All values are
Big-Endian format (as the Motorola 68000 is Big-Endian.)

Header:

*	uint32_t	magicNumber
	The magic number identifying the image format. This shall be the 32-bit
	value 0xE1AF11Ex. x is a u4 packed within, signifying the EIA revision.
	The revision described in this file is 0.

	Example: [ E1 AF 11 E0  ] - Specify a valid EIA file of revision 0.

*	uint16_t	hardwareType
	A standard hardware type identifier signifying how to interpret
	the data in this image. You may specify a known format type, or
	none at all to signify this is a custom image type. It is recommended
	you do NOT use hardwareTypes other than 00 00 that are not listed
	here, as any type unlisted is reserved.

	Formats:
		00 01 - Sega Genesis VDP

	Examples:
		[ 00 00 ] - Custom image type. The display format is
		implementation-specific. General-purpose EIA readers should
		not attempt to render the image: it is intended for
		specific embedded platforms.

*	uint16_t	reservedField
	Reserved for future use.

*	uint8_t		compression
	The type of compression used in the image. A compression type
	of 00 signifies that this EIA file may be directly loaded into
	video display hardware.

	Valid Values:
	00 - No compression
	01 - RLE compression
	02 - LZW compression

*	uint16_t	imgWidth
	The image width, in pixels.

*	uint16_t	imgHeight
	The image height, in pixels.
